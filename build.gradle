plugins {
    id 'java-library'
    id 'idea'
	id 'maven'
}

sourceCompatibility = 11
targetCompatibility = 11

repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()

    flatDir {
        dirs 'kwik/libs'
    }

}

dependencies {

    // https://mvnrepository.com/artifact/at.favre.lib/hkdf
    compile group: 'at.favre.lib', name: 'hkdf', version: '1.0.1'

    // https://mvnrepository.com/artifact/commons-cli/commons-cli
    compile group: 'commons-cli', name: 'commons-cli', version: '1.4'

    compile name: 'tls13'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'

    testCompile("org.assertj:assertj-core:3.11.1")
    testCompile("org.mockito:mockito-core:2.+")

}

sourceSets {
    main {
        java {
            srcDir 'kwik/src/main/java'
            srcDir 'qpack/src/main/java'
        }
        resources {
            srcDir 'qpack/src/main/resources'
            srcDir "${buildDir}/generated"
        }
    }
}

test {
    testLogging {
        events "passed", "skipped", "failed"
    }

    afterSuite { desc, result ->
        if (!desc.parent) { // will match the outermost suite
            println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
        }
    }
}

jar {
    doFirst {
        from {
           configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        }
        exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
    }
}

task determineVersion {
    doLast {
        def proc = "git describe --always --dirty".execute()
        proc.waitFor()
        if (proc.exitValue()) {
            logger.quiet("Building development version.")
        } else {
            def versionTag = proc.in.readLines()[0]
            logger.quiet("Building version ${versionTag}.")

            ext.versionDir = new File("${buildDir}", "generated/net/luminis/http3/sample")
            versionDir.mkdirs()

            new File(versionDir, "version.properties").text = versionTag
        }
    }
}

group = 'me.kavin.flupke'

compileJava.dependsOn determineVersion
